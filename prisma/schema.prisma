generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  DOCTOR
  DOCTORASSISTANT
}

model User {
  id            Int        @id @default(autoincrement())
  name          String
  email         String     @unique
  phone         String
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(USER)
  plan          String?  
  password      String
  accounts      Account[]
  sessions      Session[]
  doctorProfile DoctorProfile?
  isVerified    Boolean    @default(false)
  token         Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}


model DoctorProfile  {
  id            Int        @id @default(autoincrement())
  userId        Int    @unique
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trackingNumber  String
  firstName     String
  lastName      String
  middleName    String?
  dob           DateTime?
  gender        String
  page          String

  profilePicture     String?
  bio                String?
  medicalLicense          String?
  medicalLicenseExpiry    DateTime?
  yearOfExperience        Int?

  email        String?
  phone        String?
  country      String?
  city         String?
  state        String?


  medicalSchool       String?
  graduationYear      Int?
  primarySpecializations     String?
  otherSpecialties           String[]
  boardCerticates            String[]


  hospitalName              String?
  hospitalAddress           String?
  hospitalContactNumber     String?
  hospitalEmailAddress      String?
  hospitalWebsite           String?
  hospitalHoursOfOperation  Int?
  servicesOffered                  String[]
  insuranceAccepted                String?
  languagesSpoken                  String[]

  educationHistory        String?
  research                String?
  accomplishments         String?
  additionalDocs          String[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
}
